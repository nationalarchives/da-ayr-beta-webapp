name: Run Unit Tests

on:
  pull_request:
  merge_group:

jobs:
  app_tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

    - name: Set up Python
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
      with:
        python-version: 3.11

    - name: Install Poetry
      run: pip install poetry

    - name: Install dependencies
      run: poetry install

    - name: Install Node dependencies
      run: npm install

    - name: Run build script
      run: ./build.sh

    - name: Build CSS
      run: npm run build

    - name: Run App unit tests
      run: AWS_DEFAULT_REGION=eu-west-2 poetry run pytest --cov=app/main --cov-report term-missing -rsa -vvv app/tests

    - name: Generate coverage XML
      run: poetry run coverage xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24

  data_management_tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

    - name: Set up Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: Run Docker Compose Tests
      run: docker compose -f docker-compose.test.yml up --exit-code-from opensearch_indexer_tests

    - name: Copy coverage file from shared volume
      run: |
        cp ./test_results/coverage.xml ./coverage.xml || echo "Coverage file not found"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24
      with:
        file: ./coverage.xml

  e2e_tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client jq

    - name: Generate SSL certificates for local services
      run: |
        # Generate PostgreSQL certificates
        cd local_services/webapp_postgres_certs
        ./generate_webapp_postgres_certs.sh

        # Generate OpenSearch certificates
        cd ../opensearch_certs
        ./generate_opensearch_certs.sh

        # Fix permissions for PostgreSQL SSL certificates
        cd ../webapp_postgres_certs
        chmod 600 postgres_localhost.key
        chmod 644 postgres_localhost.crt
        chmod 644 root-ca.pem

    - name: Create local services environment file
      run: |
        cp local_services/.env.template local_services/.env

    - name: Create CI-specific docker-compose override
      run: | # pragma: allowlist secret
        cat > local_services/docker-compose.override.yml << 'EOF'
        services:
          webapp_postgres:
            volumes:
              - webapp_postgres_data:/var/lib/postgresql/data
              - ./dev-data.sql:/docker-entrypoint-initdb.d/dev-data.sql
              - ./webapp_postgres_certs/postgres_localhost.crt:/var/lib/postgresql/postgres_localhost.crt
              - ./webapp_postgres_certs/postgres_localhost.key:/var/lib/postgresql/postgres_localhost.key
              - ./webapp_postgres_certs/root-ca.pem:/var/lib/postgresql/root-ca.pem
            command: [
              "postgres",
              "-c", "ssl=on",
              "-c", "ssl_cert_file=/var/lib/postgresql/postgres_localhost.crt",
              "-c", "ssl_key_file=/var/lib/postgresql/postgres_localhost.key",
              "-c", "ssl_ca_file=/var/lib/postgresql/root-ca.pem"
            ]

          opensearch-node1:
            environment:
              - cluster.name=opensearch-cluster
              - node.name=opensearch-node1
              # - discovery.type=single-node
              - bootstrap.memory_lock=false
              - OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m
              - OPENSEARCH_INITIAL_ADMIN_PASSWORD=admin
              - DISABLE_SECURITY_PLUGIN=true
              - DISABLE_INSTALL_DEMO_CONFIG=true
              - DISABLE_PERFORMANCE_ANALYZER_AGENT_CLI=true
            volumes:
              - opensearch-data1:/usr/share/opensearch/data
            ports:
              - 9200:9200
              - 9600:9600
            networks:
              - opensearch-net
            ulimits:
              memlock:
                soft: -1
                hard: -1
              nofile:
                soft: 65536
                hard: 65536

          opensearch-node2:
            deploy:
              replicas: 0
        EOF

    - name: Create PostgreSQL init script
      run: |
        cat > local_services/fix-ssl-permissions.sh << 'EOF'
        #!/bin/bash
        # Fix SSL certificate permissions as root
        chown postgres:postgres /var/lib/postgresql/postgres_localhost.key /var/lib/postgresql/postgres_localhost.crt /var/lib/postgresql/root-ca.pem
        chmod 600 /var/lib/postgresql/postgres_localhost.key
        chmod 644 /var/lib/postgresql/postgres_localhost.crt /var/lib/postgresql/root-ca.pem
        # Switch to postgres user and run original entrypoint
        exec gosu postgres docker-entrypoint.sh "$@"
        EOF
        chmod +x local_services/fix-ssl-permissions.sh

    - name: Update docker-compose override to use init script
      run: | # pragma: allowlist secret
        cat > local_services/docker-compose.override.yml << 'EOF'
        services:
          webapp_postgres:
            volumes:
              - webapp_postgres_data:/var/lib/postgresql/data
              - ./dev-data.sql:/docker-entrypoint-initdb.d/dev-data.sql
              - ./webapp_postgres_certs/postgres_localhost.crt:/var/lib/postgresql/postgres_localhost.crt
              - ./webapp_postgres_certs/postgres_localhost.key:/var/lib/postgresql/postgres_localhost.key
              - ./webapp_postgres_certs/root-ca.pem:/var/lib/postgresql/root-ca.pem
              - ./fix-ssl-permissions.sh:/usr/local/bin/fix-ssl-permissions.sh
            entrypoint: ["/usr/local/bin/fix-ssl-permissions.sh"]
            command: [
              "postgres",
              "-c", "ssl=on",
              "-c", "ssl_cert_file=/var/lib/postgresql/postgres_localhost.crt",
              "-c", "ssl_key_file=/var/lib/postgresql/postgres_localhost.key",
              "-c", "ssl_ca_file=/var/lib/postgresql/root-ca.pem"
            ]

          opensearch-node1:
            environment:
              - cluster.name=opensearch-cluster
              - node.name=opensearch-node1
              # - discovery.type=single-node
              - bootstrap.memory_lock=false
              - OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m
              - OPENSEARCH_INITIAL_ADMIN_PASSWORD=admin
              - DISABLE_SECURITY_PLUGIN=true
              - DISABLE_INSTALL_DEMO_CONFIG=true
              - DISABLE_PERFORMANCE_ANALYZER_AGENT_CLI=true
            volumes:
              - opensearch-data1:/usr/share/opensearch/data
            ports:
              - 9200:9200
              - 9600:9600
            networks:
              - opensearch-net
            ulimits:
              memlock:
                soft: -1
                hard: -1
              nofile:
                soft: 65536
                hard: 65536

          opensearch-node2:
            deploy:
              replicas: 0
        EOF

    - name: Start local services
      run: |
        cd local_services && docker compose up -d

    - name: Wait for services to be ready
      run: | # pragma: allowlist secret
        echo "Checking Docker containers status..."
        docker ps

        echo "Checking webapp_postgres container logs..."
        sleep 10  # Give containers a moment to start
        docker logs local_services-webapp_postgres-1 --tail 20

        echo "Waiting for PostgreSQL (webapp)..."
        timeout 300 bash -c 'until pg_isready -h localhost -p 5433 -U local_db_user; do echo "PostgreSQL not ready yet... ($(date))"; docker logs local_services-webapp_postgres-1 --tail 5; sleep 10; done'
        echo "PostgreSQL is ready"

        echo "Waiting for Keycloak..."
        echo "Checking if Keycloak container is running..."
        docker logs local_services-keycloak-1 --tail 10
        timeout 300 bash -c 'until curl -f http://localhost:8080/realms/master 2>/dev/null; do echo "Keycloak not ready yet... ($(date))"; sleep 10; done'
        echo "Keycloak is ready"

        echo "Configuring Keycloak client secret..."
        sleep 10  # Give Keycloak time to fully initialize

        # Get admin access token
        ADMIN_TOKEN=$(curl -s -X POST "http://localhost:8080/realms/master/protocol/openid-connect/token" \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d "username=admin" \
          -d "password=password" \
          -d "grant_type=password" \
          -d "client_id=admin-cli" | jq -r '.access_token')

        # Check if tdr realm exists, if not wait for import
        until curl -s -H "Authorization: Bearer $ADMIN_TOKEN" "http://localhost:8080/admin/realms/tdr" | grep -q "tdr"; do
          echo "Waiting for tdr realm to be imported..."
          sleep 5
        done

        # Get client ID
        CLIENT_ID=$(curl -s -H "Authorization: Bearer $ADMIN_TOKEN" "http://localhost:8080/admin/realms/tdr/clients?clientId=ayr-beta" | jq -r '.[0].id')

        # Update client secret and enable service accounts
        curl -s -X PUT "http://localhost:8080/admin/realms/tdr/clients/$CLIENT_ID" \
          -H "Authorization: Bearer $ADMIN_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{"secret":"test-client-secret","serviceAccountsEnabled":true,"directAccessGrantsEnabled":true}'

        # Get realm management client ID
        REALM_MGMT_CLIENT_ID=$(curl -s -H "Authorization: Bearer $ADMIN_TOKEN" "http://localhost:8080/admin/realms/tdr/clients?clientId=realm-management" | jq -r '.[0].id')

        # Get manage-users role ID
        MANAGE_USERS_ROLE_ID=$(curl -s -H "Authorization: Bearer $ADMIN_TOKEN" "http://localhost:8080/admin/realms/tdr/clients/$REALM_MGMT_CLIENT_ID/roles/manage-users" | jq -r '.id')

        # Get service account user ID for ayr-beta client
        SERVICE_ACCOUNT_USER_ID=$(curl -s -H "Authorization: Bearer $ADMIN_TOKEN" "http://localhost:8080/admin/realms/tdr/clients/$CLIENT_ID/service-account-user" | jq -r '.id')

        # Assign manage-users role to service account
        curl -s -X POST "http://localhost:8080/admin/realms/tdr/users/$SERVICE_ACCOUNT_USER_ID/role-mappings/clients/$REALM_MGMT_CLIENT_ID" \
          -H "Authorization: Bearer $ADMIN_TOKEN" \
          -H "Content-Type: application/json" \
          -d '[{"id":"'"$MANAGE_USERS_ROLE_ID"'","name":"manage-users"}]'

        echo "Keycloak client configured with admin permissions"

        echo "Creating missing groups..."

        # Create transferring_body_user parent group if it doesn't exist
        curl -s -X POST "http://localhost:8080/admin/realms/tdr/groups" \
          -H "Authorization: Bearer $ADMIN_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{"name":"transferring_body_user","path":"/transferring_body_user"}' 2>/dev/null || true

        # Get transferring_body_user group ID
        TB_GROUP_ID=$(curl -s -H "Authorization: Bearer $ADMIN_TOKEN" "http://localhost:8080/admin/realms/tdr/groups?search=transferring_body_user" | jq -r '.[0].id')

        # Create "Testing A" subgroup under transferring_body_user
        if [ "$TB_GROUP_ID" != "null" ] && [ -n "$TB_GROUP_ID" ]; then
          curl -s -X POST "http://localhost:8080/admin/realms/tdr/groups/$TB_GROUP_ID/children" \
            -H "Authorization: Bearer $ADMIN_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"name":"Testing A","path":"/transferring_body_user/Testing A"}' 2>/dev/null || true
        fi

        echo "Missing groups created"

        echo "Creating test users..."

        # Create AAU test user
        curl -s -X POST "http://localhost:8080/admin/realms/tdr/users" \
          -H "Authorization: Bearer $ADMIN_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{
            "username":"test-aau-user@example.com",
            "email":"test-aau-user@example.com",
            "firstName":"Test",
            "lastName":"AAU",
            "enabled":true,
            "credentials":[{"type":"password","value":"test-password","temporary":false}]
          }'

        # Create Standard test user
        curl -s -X POST "http://localhost:8080/admin/realms/tdr/users" \
          -H "Authorization: Bearer $ADMIN_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{
            "username":"test-standard-user@example.com",
            "email":"test-standard-user@example.com",
            "firstName":"Test",
            "lastName":"Standard",
            "enabled":true,
            "credentials":[{"type":"password","value":"test-password","temporary":false}]
          }'

        # Get user IDs by searching for them
        AAU_USER_ID=$(curl -s -H "Authorization: Bearer $ADMIN_TOKEN" "http://localhost:8080/admin/realms/tdr/users?username=test-aau-user@example.com" | jq -r '.[0].id')
        STANDARD_USER_ID=$(curl -s -H "Authorization: Bearer $ADMIN_TOKEN" "http://localhost:8080/admin/realms/tdr/users?username=test-standard-user@example.com" | jq -r '.[0].id')

        echo "Found user IDs: AAU=$AAU_USER_ID, Standard=$STANDARD_USER_ID"

        # Get group IDs
        VIEW_ALL_GROUP_ID=$(curl -s -H "Authorization: Bearer $ADMIN_TOKEN" "http://localhost:8080/admin/realms/tdr/groups?search=view_all" | jq -r '.[0].id')
        VIEW_DEPT_GROUP_ID=$(curl -s -H "Authorization: Bearer $ADMIN_TOKEN" "http://localhost:8080/admin/realms/tdr/groups?search=view_dept" | jq -r '.[0].id')
        echo "Group IDs - view_all: $VIEW_ALL_GROUP_ID, view_dept: $VIEW_DEPT_GROUP_ID"

        # Add AAU user to view_all group
        if [ "$AAU_USER_ID" != "null" ] && [ -n "$AAU_USER_ID" ]; then
          curl -s -X PUT "http://localhost:8080/admin/realms/tdr/users/$AAU_USER_ID/groups/$VIEW_ALL_GROUP_ID" \
            -H "Authorization: Bearer $ADMIN_TOKEN"
          echo "Added AAU user to view_all group"
        fi

        # Add Standard user to view_dept group
        if [ "$STANDARD_USER_ID" != "null" ] && [ -n "$STANDARD_USER_ID" ]; then
          curl -s -X PUT "http://localhost:8080/admin/realms/tdr/users/$STANDARD_USER_ID/groups/$VIEW_DEPT_GROUP_ID" \
            -H "Authorization: Bearer $ADMIN_TOKEN"
          echo "Added Standard user to view_dept group"
        fi

        echo "Test user setup completed"

        echo "Waiting for OpenSearch to be available..."
        timeout 300 bash -c 'until curl -f http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=5s 2>/dev/null; do echo "OpenSearch not ready yet... ($(date))"; sleep 10; done' || echo "OpenSearch failed to start - continuing without search functionality"

        echo "All services ready"

    - name: Skip OpenSearch data setup
      run: |
        echo "Skipping OpenSearch data setup for CI environment"

    - name: Set up Python
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
      with:
        python-version: 3.11

    - name: Install Poetry
      run: pip install poetry

    - name: Install webapp dependencies
      run: |
        poetry install
        npm install
        ./build.sh
        npm run build

    - name: Install E2E test dependencies
      run: cd e2e_tests/ && poetry install --no-root && poetry run playwright install --with-deps

    - name: Set up webapp environment
      run: |
        cat > .env << 'EOF'
        CONFIG_SOURCE=ENVIRONMENT_VARIABLES
        KEYCLOAK_BASE_URI=http://localhost:8080
        KEYCLOAK_CLIENT_ID=ayr-beta
        KEYCLOAK_REALM_NAME=tdr
        KEYCLOAK_CLIENT_SECRET=test-client-secret
        DB_PORT=5433
        DB_HOST=localhost
        DB_NAME=local_db
        DB_USER=local_db_user
        DB_PASSWORD=local_db_user_password
        AWS_ENDPOINT_URL=http://localhost:9000
        AWS_ACCESS_KEY_ID=ROOTNAME
        AWS_SECRET_ACCESS_KEY=CHANGEME123
        AWS_REGION=eu-west-2
        SECRET_KEY=test-secret-key
        DEFAULT_PAGE_SIZE=10
        DEFAULT_DATE_FORMAT=DD/MM/YYYY
        RECORD_BUCKET_NAME=test-record-download
        FLASKS3_ACTIVE=False
        FLASKS3_CDN_DOMAIN=localhost
        FLASKS3_BUCKET_NAME=test-record-download
        PERF_TEST=False
        DB_SSL_ROOT_CERTIFICATE=local_services/webapp_postgres_certs/root-ca.pem
        OPEN_SEARCH_HOST=localhost:9200
        OPEN_SEARCH_USERNAME=admin
        OPEN_SEARCH_PASSWORD=admin
        OPEN_SEARCH_CA_CERTS=
        OPEN_SEARCH_TIMEOUT=10
        EOF

    - name: Generate SSL certificate for webapp
      run: |
        poetry run openssl req -x509 -newkey rsa:4096 -nodes -out cert.pem -keyout key.pem -days 365 -subj "/CN=localhost"

    - name: Start webapp
      run: |
        echo "Starting Flask webapp..."
        # Set Flask to debug mode for better error logging in CI
        export FLASK_ENV=development
        export FLASK_DEBUG=1
        source .env && poetry run flask run > webapp.log 2>&1 &
        FLASK_PID=$!
        echo "Flask PID: $FLASK_PID"
        sleep 10  # Give webapp time to start

        # Check if Flask is still running
        if ! ps -p $FLASK_PID > /dev/null; then
          echo "Flask process died! Logs:"
          cat webapp.log
          exit 1
        fi

        # Wait for webapp to be ready
        timeout 60 bash -c 'until curl -k -f https://localhost:5000/health 2>/dev/null || curl -k -f https://localhost:5000/ 2>/dev/null; do echo "Webapp not ready yet... ($(date))"; sleep 2; done' || (echo "Webapp failed to start. Logs:"; cat webapp.log; exit 1)
        echo "Webapp is ready"


    - name: Run E2E tests
      env:
        KEYCLOAK_BASE_URI: http://localhost:8080
        KEYCLOAK_REALM_NAME: tdr
        KEYCLOAK_CLIENT_ID: ayr-beta
        KEYCLOAK_CLIENT_SECRET: test-client-secret # pragma: allowlist secret
        AYR_AAU_USER_USERNAME: test-aau-user@example.com
        AYR_AAU_USER_PASSWORD: test-password # pragma: allowlist secret
        AYR_STANDARD_USER_USERNAME: test-standard-user@example.com
        AYR_STANDARD_USER_PASSWORD: test-password # pragma: allowlist secret
      run: |
        # Run actual tests, excluding problematic tests for CI environment
        cd e2e_tests/ && poetry run pytest . --base-url=https://localhost:5000 -k "not test_css_no_visual_regression and not test_record_download_record and not test_sign_in_succeeds_when_valid_credentials and not test_token_expiry" --tb=short -s --browser chromium --screenshot=on

    - name: Upload test artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: e2e_tests/test-results/

    - name: Show container logs on failure
      if: failure()
      run: |
        echo "=== Docker container status ==="
        docker ps -a
        echo "=== PostgreSQL logs ==="
        docker logs local_services-webapp_postgres-1 || echo "No webapp_postgres container found"
        echo "=== Keycloak logs ==="
        docker logs local_services-keycloak-1 || echo "No keycloak container found"
        echo "=== OpenSearch node1 logs ==="
        docker logs opensearch-node1 || echo "No opensearch-node1 container found"
        echo "=== Webapp logs ==="
        cat webapp.log || echo "No webapp logs found"

    - name: Stop local services
      if: always()
      run: |
        cd local_services && docker compose down
