name: Run Unit Tests

on:
  pull_request:
  merge_group:

jobs:
  app_tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

    - name: Set up Python
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
      with:
        python-version: 3.11

    - name: Install Poetry
      run: pip install poetry

    - name: Install dependencies
      run: poetry install

    - name: Install Node dependencies
      run: npm install

    - name: Run build script
      run: ./build.sh

    - name: Build CSS
      run: npm run build

    - name: Run App unit tests
      run: AWS_DEFAULT_REGION=eu-west-2 poetry run pytest --cov=app/main --cov-report term-missing -rsa -vvv app/tests

    - name: Generate coverage XML
      run: poetry run coverage xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24

  data_management_tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

    - name: Set up Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: Run Docker Compose Tests
      run: docker compose -f docker-compose.test.yml up --exit-code-from opensearch_indexer_tests

    - name: Copy coverage file from shared volume
      run: |
        cp ./test_results/coverage.xml ./coverage.xml || echo "Coverage file not found"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24
      with:
        file: ./coverage.xml

  e2e_tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

    - name: Install PostgreSQL client
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Generate SSL certificates for local services
      run: |
        # Generate PostgreSQL certificates
        cd local_services/webapp_postgres_certs
        ./generate_webapp_postgres_certs.sh
        
        # Generate OpenSearch certificates  
        cd ../opensearch_certs
        ./generate_opensearch_certs.sh
        
        # Fix permissions for PostgreSQL SSL certificates
        cd ../webapp_postgres_certs
        chmod 600 postgres_localhost.key
        chmod 644 postgres_localhost.crt
        chmod 644 root-ca.pem

    - name: Create local services environment file
      run: |
        cp local_services/.env.template local_services/.env

    - name: Start local services
      run: |
        cd local_services && docker compose up -d

    - name: Wait for services to be ready
      run: |
        echo "Checking Docker containers status..."
        docker ps
        
        echo "Checking webapp_postgres container logs..."
        sleep 10  # Give containers a moment to start
        docker logs local_services-webapp_postgres-1 --tail 20
        
        echo "Waiting for PostgreSQL (webapp)..."
        timeout 300 bash -c 'until pg_isready -h localhost -p 5433 -U local_db_user; do echo "PostgreSQL not ready yet... ($(date))"; docker logs local_services-webapp_postgres-1 --tail 5; sleep 10; done'
        echo "PostgreSQL is ready"
        
        echo "Waiting for Keycloak..."
        timeout 300 bash -c 'until curl -f http://localhost:8080/health/ready 2>/dev/null; do echo "Keycloak not ready yet... ($(date))"; sleep 5; done'
        echo "Keycloak is ready"
        
        echo "Waiting for OpenSearch..."
        timeout 300 bash -c 'until curl -s -k -u admin:FOOBARCARabc123! https://localhost:9200/_cluster/health | grep -q "yellow\|green"; do echo "OpenSearch not ready yet... ($(date))"; sleep 10; done'
        echo "OpenSearch is ready"
        
        echo "All services are ready!"

    - name: Setup opensearch data
      run: |
        source local_services/.env && timeout 120 local_services/opensearch-entrypoint.sh

    - name: Set up Python
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
      with:
        python-version: 3.11

    - name: Install Poetry
      run: pip install poetry

    - name: Install E2E test dependencies
      run: cd e2e_tests/ && poetry install --no-root && poetry run playwright install --with-deps

    - name: Run E2E tests
      env:
        KEYCLOAK_BASE_URI: http://localhost:8080
        KEYCLOAK_CLIENT_ID: ayr-beta
        KEYCLOAK_REALM_NAME: tdr
        KEYCLOAK_CLIENT_SECRET: test-secret
        WEBAPP_BASE_URL: https://localhost:5000
        AYR_AAU_USER_USERNAME: test-user
        AYR_AAU_USER_PASSWORD: test-password
        AYR_STANDARD_USER_USERNAME: standard-user
        AYR_STANDARD_USER_PASSWORD: standard-password
      run: |
        cd e2e_tests/ && poetry run pytest . --base-url=https://localhost:5000 -k "not test_css_no_visual_regression" -vvvv -rsa --slowmo 100 -ra -vvvv --tracing on --browser chromium

    - name: Show container logs on failure
      if: failure()
      run: |
        echo "=== Docker container status ==="
        docker ps -a
        echo "=== PostgreSQL logs ==="
        docker logs local_services-webapp_postgres-1 || echo "No webapp_postgres container found"
        echo "=== Keycloak logs ==="
        docker logs local_services-keycloak-1 || echo "No keycloak container found"
        echo "=== OpenSearch node1 logs ==="
        docker logs opensearch-node1 || echo "No opensearch-node1 container found"

    - name: Stop local services
      if: always()
      run: |
        cd local_services && docker compose down
