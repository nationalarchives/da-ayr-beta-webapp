name: Run Unit Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  app_tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.11

    - name: Install Poetry
      run: pip install poetry

    - name: Install dependencies
      run: poetry install

    - name: Install Node dependencies
      run: npm install

    - name: Run build script
      run: ./build.sh

    - name: Build CSS
      run: npm run build

    - name: Run App unit tests
      run: AWS_DEFAULT_REGION=eu-west-2 poetry run pytest --cov=app/main --cov-report term-missing -rsa -vvv app/tests

    - name: Generate coverage XML
      run: poetry run coverage xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3

  data_management_tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: Run Docker Compose Tests
      run: docker compose -f docker-compose.test.yml up --exit-code-from opensearch_indexer_tests

    - name: Copy coverage file from shared volume
      run: |
        cp ./test_results/coverage.xml ./coverage.xml || echo "Coverage file not found"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  run-e2e-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install Poetry
        run: pip install poetry

      - name: Install app dependencies
        run: poetry install

      - name: Install Node dependencies
        run: npm install

      - name: Build assets
        run: |
          ./build.sh
          npm run build

      - name: Start local services
        run: |
          cd local_services
          docker compose up -d
          echo "Services started"
        env:
          OPENSEARCH_INITIAL_ADMIN_PASSWORD: FOOBARCARabc123! # pragma: allowlist secret
          POSTGRES_DB: local_db
          POSTGRES_USER: local_db_user
          POSTGRES_PASSWORD: local_db_user_password # pragma: allowlist secret
          KEYCLOAK_ADMIN: admin
          KEYCLOAK_ADMIN_PASSWORD: password # pragma: allowlist secret
          KC_POSTGRES_PORT: 5432
          WEBAPP_POSTGRES_PORT: 5434
          MINIO_ROOT_USER: ROOTNAME
          MINIO_ROOT_PASSWORD: CHANGEME123 # pragma: allowlist secret

      - name: Wait for services to be ready
        run: |
          echo "Waiting for PostgreSQL"
          timeout 60s bash -c 'until docker compose -f local_services/docker-compose.yml exec -T postgres pg_isready -U postgres; do sleep 2; done'

          echo "Waiting for OpenSearch"
          timeout 120s bash -c 'until curl -s http://localhost:9200/_cluster/health | grep -q "yellow\|green"; do sleep 5; done'

          echo "Waiting for MinIO"
          timeout 60s bash -c 'until curl -s http://localhost:9000/minio/health/live; do sleep 2; done'

      - name: Run database migrations and setup test data
        run: | # pragma: allowlist secret
          export DATABASE_URL=postgresql://postgres:password@localhost:5432/testdb
          export OPENSEARCH_URL=http://localhost:9200
          export MINIO_ENDPOINT=localhost:9000
          export MINIO_ACCESS_KEY=minioadmin
          export MINIO_SECRET_KEY=minioadmin
          export AWS_DEFAULT_REGION=eu-west-2

          # Import test files and index them
          poetry run python local_services/mds_data_generator/mds_test_file_importer.py || echo "Failed to import test files"

      - name: Start Flask application
        run: | # pragma: allowlist secret
          export DATABASE_URL=postgresql://postgres:password@localhost:5432/testdb
          export OPENSEARCH_URL=http://localhost:9200
          export MINIO_ENDPOINT=localhost:9000
          export MINIO_ACCESS_KEY=minioadmin
          export MINIO_SECRET_KEY=minioadmin
          export FLASK_ENV=testing
          export AWS_DEFAULT_REGION=eu-west-2

          nohup poetry run python app.py > flask.log 2>&1 &
          echo $! > flask.pid

          echo "Waiting for Flask application to start"
          timeout 60s bash -c 'until curl -s http://localhost:5000; do sleep 2; done'
          echo "Flask application is ready"

      - name: Install E2E test dependencies
        run: |
          cd e2e_tests/
          poetry install --no-root
          poetry run playwright install --with-deps

      - name: Run E2E tests
        env:
          KEYCLOAK_BASE_URI: http://localhost:8080
          KEYCLOAK_CLIENT_ID: test-client
          KEYCLOAK_REALM_NAME: test
          KEYCLOAK_CLIENT_SECRET: test-secret # pragma: allowlist secret
          WEBAPP_BASE_URL: http://localhost:5000
        run: |
          cd e2e_tests/
          poetry run pytest . \
            --base-url=http://localhost:5000 \
            -k "not test_css_no_visual_regression" \
            -vvv \
            -rsa \
            --slowmo 100 \
            --tracing on \
            --browser chromium \
            --html=e2e-report.html \
            --self-contained-html

      - name: Upload E2E test results
        # if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: |
            e2e_tests/e2e-report.html
            e2e_tests/test-results/
            flask.log

      - name: Cleanup services
        # if: always()
        run: |
          if [ -f flask.pid ]; then
            kill $(cat flask.pid) || true
          fi
          cd local_services
          docker compose down -v || true

      - name: Show Flask logs on failure
        # if: failure()
        run: |
          echo "=== Flask Application Logs ==="
          cat flask.log || echo "No Flask logs found"
