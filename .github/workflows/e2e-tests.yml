name: Run E2E Tests

on:
  pull_request:
  merge_group:

jobs:
  e2e_tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8


    - name: Set up environment variables
      run: | # pragma: allowlist secret
        cd local_services
        cat > .docker.env << EOF
        CONFIG_SOURCE=ENVIRONMENT_VARIABLES
        PYTHONUNBUFFERED=1
        FLASK_ENV=development
        DB_HOST=webapp_postgres
        DB_PORT=5432
        DB_NAME=local_db
        DB_USER=local_db_user
        DB_PASSWORD=local_db_user_password
        DB_SSL_ROOT_CERTIFICATE=/app/local_services/webapp_postgres_certs/root-ca.pem
        SQLALCHEMY_SSL_MODE=disable
        KEYCLOAK_BASE_URI=http://keycloak:8080
        KEYCLOAK_CLIENT_ID=ayr-beta
        KEYCLOAK_REALM_NAME=tdr
        KEYCLOAK_CLIENT_SECRET=test-client-secret
        AWS_ENDPOINT_URL=http://minio:9000
        AWS_ACCESS_KEY_ID=ROOTNAME
        AWS_SECRET_ACCESS_KEY=CHANGEME123
        AWS_REGION=eu-west-2
        SECRET_KEY=test-secret-key
        DEFAULT_PAGE_SIZE=10
        DEFAULT_DATE_FORMAT=DD/MM/YYYY
        RECORD_BUCKET_NAME=test-record-download
        FLASKS3_ACTIVE=False
        FLASKS3_CDN_DOMAIN=localhost
        FLASKS3_BUCKET_NAME=test-record-download
        PERF_TEST=False
        OPEN_SEARCH_HOST=http://opensearch-node1:9200
        OPEN_SEARCH_USERNAME=
        OPEN_SEARCH_PASSWORD=
        OPEN_SEARCH_CA_CERTS=
        OPEN_SEARCH_TIMEOUT=20
        OPEN_SEARCH_USE_SSL=false
        OPEN_SEARCH_VERIFY_CERTS=false
        ACCESS_COPY_BUCKET=test-access-copy
        CONVERTIBLE_EXTENSIONS=.doc,.docx
        EOF

    - name: Start services
      run: |
        cd local_services

        # Start Docker Compose with CI-specific configuration
        docker compose -f docker-compose.ci.yml up -d
      env:
        CONFIG_SOURCE: ENVIRONMENT_VARIABLES
        OPENSEARCH_INITIAL_ADMIN_PASSWORD: FOOBARCARabc123! # pragma: allowlist secret
        POSTGRES_USER: local_db_user
        POSTGRES_PASSWORD: local_db_user_password # pragma: allowlist secret
        POSTGRES_DB: local_db
        KC_POSTGRES_PORT: 5432
        WEBAPP_POSTGRES_PORT: 5433
        KEYCLOAK_ADMIN: admin
        KEYCLOAK_ADMIN_PASSWORD: password # pragma: allowlist secret
        MINIO_ROOT_USER: ROOTNAME
        MINIO_ROOT_PASSWORD: CHANGEME123 # pragma: allowlist secret

    - name: Wait for services to be ready
      run: |
        echo "Waiting for services to start"
        sleep 120

        # Check Docker services status
        cd local_services
        echo "All services in docker-compose.ci.yml:"
        docker compose -f docker-compose.ci.yml config --services
        echo "Running services:"
        docker compose -f docker-compose.ci.yml ps
        echo "All containers (including stopped):"
        docker compose -f docker-compose.ci.yml ps -a

        # Check logs for failed services
        echo "webapp_postgres logs:"
        docker logs local_services-webapp_postgres-1 --tail 20

        echo "opensearch-node1 logs:"
        docker logs opensearch-node1 --tail 30 || echo "Failed to get opensearch-node1 logs"

        echo "Network inspection:"
        docker network ls
        docker network inspect local_services_ci_network || echo "CI network not found"

        echo "Webapp logs:"
        docker logs webapp --tail 20

        # Wait for postgres to be ready for connections
        echo "Waiting for postgres to be ready..."
        timeout 120 bash -c 'until docker exec local_services-webapp_postgres-1 pg_isready -h localhost -p 5432; do sleep 2; done'

        # Test postgres connectivity
        echo "Testing postgres connectivity..."
        timeout 60 bash -c 'until docker exec webapp python -c "import psycopg2; psycopg2.connect(host=\"webapp_postgres\", port=5432, user=\"local_db_user\", password=\"local_db_user_password\", dbname=\"local_db\")" 2>/dev/null; do echo "Waiting for postgres..."; sleep 5; done'
        echo "PostgreSQL connection successful"

        echo "Final service status check:"
        docker compose -f docker-compose.ci.yml ps

        echo "Checking webapp logs:"
        docker logs webapp --tail 20

        echo "Checking postgres logs:"
        docker logs local_services-webapp_postgres-1 --tail 20

        timeout 120 bash -c 'until curl -k -f https://127.0.0.1:5000 || curl -f http://127.0.0.1:5000; do sleep 2; done'

        # Wait for keycloak realm to be ready
        timeout 120 bash -c 'until curl -f http://127.0.0.1:8080/realms/tdr/.well-known/openid-configuration; do sleep 2; done'
      env:
        CONFIG_SOURCE: ENVIRONMENT_VARIABLES
        OPENSEARCH_INITIAL_ADMIN_PASSWORD: FOOBARCARabc123! # pragma: allowlist secret
        POSTGRES_USER: local_db_user
        POSTGRES_PASSWORD: local_db_user_password # pragma: allowlist secret
        POSTGRES_DB: local_db
        KC_POSTGRES_PORT: 5432
        WEBAPP_POSTGRES_PORT: 5433
        KEYCLOAK_ADMIN: admin
        KEYCLOAK_ADMIN_PASSWORD: password # pragma: allowlist secret
        MINIO_ROOT_USER: ROOTNAME
        MINIO_ROOT_PASSWORD: CHANGEME123 # pragma: allowlist secret



    - name: Set up E2E test environment
      run: | # pragma: allowlist secret
        cat > .env.e2e_tests << EOF
        AYR_AAU_USER_USERNAME=testuser
        AYR_AAU_USER_PASSWORD=password123
        AYR_STANDARD_USER_USERNAME=testuser
        AYR_STANDARD_USER_PASSWORD=password123
        KEYCLOAK_BASE_URI=http://127.0.0.1:8080
        KEYCLOAK_CLIENT_ID=ayr-beta
        KEYCLOAK_REALM_NAME=tdr
        KEYCLOAK_CLIENT_SECRET=test-client-secret
        EOF

    - name: Build E2E Docker image
      run: |
        cd e2e_tests
        docker build -t e2e_tests .

    - name: Run E2E tests with Docker
      run: |
        docker run --rm --env-file .env.e2e_tests --network=host \
          -v "$(pwd)/e2e_tests":/e2e_tests e2e_tests

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: e2e_tests/playwright-report/
        retention-days: 7

    - name: Upload visual snapshots
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: visual-regression-snapshots
        path: e2e_tests/snapshots/
        retention-days: 7

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: e2e_tests/test-results/
        retention-days: 7
    - name: Check logs after test failure
      if: failure()
      run: |
          echo "=== Webapp logs ==="
          cd local_services
          docker compose -f docker-compose.ci.yml logs webapp
          echo "=== Database logs ==="
          docker compose -f docker-compose.ci.yml logs webapp_postgres
          echo "=== OpenSearch logs ==="
          docker compose -f docker-compose.ci.yml logs opensearch-node1
          echo "=== MinIO logs ==="
          docker compose -f docker-compose.ci.yml logs minio

    - name: Stop services
      if: always()
      run: |
        cd local_services
        docker compose -f docker-compose.ci.yml down -v
        docker system prune -f
